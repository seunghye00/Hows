<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Product">

	<!-- 베스트 상품 목록 -->
    <select id="getBestProducts" resultType="com.hows.product.dto.ProductDTO">
        SELECT p.product_seq, 
               p.product_thumbnail, 
               p.product_title, 
               p.product_contents, 
               p.price, 
               p.quantity, 
               COALESCE(SUM(ol.order_list_count), 0) AS total_sales <!-- 총 판매량, 주문이 없는 경우 0으로 표시 -->
        FROM product p 
        LEFT JOIN order_list ol <!-- 주문 리스트와 상품 조인 -->
        ON p.product_seq = ol.product_seq 
        where quantity != 0 <!-- 품절 상품 제외 -->
        GROUP BY p.product_seq, 
                 p.product_thumbnail, 
                 p.product_title, 
                 p.product_contents, 
                 p.price, 
                 p.quantity 
        ORDER BY total_sales DESC
    </select>
    
	<resultMap id="myReviewMap" type="java.util.HashMap">
		<result property="review_seq" column="review_seq"/>
		<result property="rating" column="rating"/>
		<result property="review_contents" column="review_contents"/>
		<result property="review_date" column="review_date" javaType="java.sql.Timestamp"/>
		<result property="product_seq" column="product_seq"/>
		<result property="product_title" column="product_title"/>
		<result property="member_id" column="member_id"/>
	</resultMap>

	<!-- 메인 페이지 상품 랜덤으로 '전체' 목록 출력 -->
	<select id="getProducts" resultType="com.hows.product.dto.ProductDTO">
		SELECT * 
		FROM PRODUCT 
		where quantity != 0 <!-- 품절 상품 제외 -->
		ORDER BY DBMS_RANDOM.VALUE 
	</select>
	
	<!-- 메인페이지 '리뷰가 많은 순'으로 목록 출력 -->
	<select id="getProductBytReview" resultType="com.hows.product.dto.ProductDTO">
		SELECT p.product_seq, p.product_thumbnail, p.product_title, p.product_contents, p.price, p.product_category_code, COUNT(r.review_seq) AS review_count
		FROM product p
		LEFT JOIN review r ON p.product_seq = r.product_seq
		where quantity != 0 <!-- 품절 상품 제외 -->
		GROUP BY p.product_seq, p.product_thumbnail, p.product_title, p.product_contents, p.price, p.product_category_code
		ORDER BY review_count DESC
	</select>
	
	<select id="getProductByCategory" parameterType="String" resultType="map">
		  SELECT 
		    p.*,
		    NVL(pl.like_count, 0) AS like_count
		  FROM PRODUCT p
		  LEFT JOIN (
		    SELECT product_seq, COUNT(*) AS like_count
		    FROM product_like
		    GROUP BY product_seq
		  ) pl ON p.product_seq = pl.product_seq
		  WHERE p.product_category_code = #{product_category_code}
		  and quantity != 0 <!-- 품절 상품 제외 -->
	</select>

	<select id="getProductDetaile" parameterType="String" resultType="com.hows.product.dto.ProductDTO">
		SELECT *
		FROM PRODUCT
		WHERE product_seq = #{product_seq}
	</select>

	<!-- 특정 회원이 특정 상품을 구매 확정했는지 확인 -->
    <select id="countCompletedOrders" resultType="int">
        SELECT COUNT(*)
        FROM orders o
        JOIN member m ON o.member_seq = m.member_seq
        JOIN order_list ol ON o.order_seq = ol.order_seq
        JOIN order_status os ON o.order_code = os.order_code
        WHERE m.member_id = #{memberId}
        AND ol.product_seq = #{productSeq}
        AND os.order_code = 'O6'  <!-- 구매 확정 상태 -->
    </select>
    
	<!-- 특정 회원이 특정 상품에 작성한 리뷰 수 확인 -->
	<select id="countUserReviews" resultType="int">
	    SELECT COUNT(*)
	    FROM review
	    WHERE member_id = #{memberId}
	    AND product_seq = #{productSeq}
	</select>
    
	<!-- 리뷰등록 -->
	<insert id="insertReview" parameterType="com.hows.product.dto.ReviewDTO">
		INSERT INTO review (review_seq, rating, review_contents, review_date,
		product_seq, member_id)
		VALUES (review_seq.nextval, #{rating}, #{review_contents}, SYSDATE,
		#{product_seq}, #{member_id})
	</insert>
	
	<!-- 리뷰 이미지 등 -->
	<insert id="insertReviewImage" parameterType="com.hows.product.dto.ImageDTO">
		insert into review_image
		(review_image_seq, review_seq, image_url, image_order)
		values (review_image_seq.nextval, #{review_seq}, #{image_url}, #{image_order})
	</insert>
		
	<!-- 리뷰 시퀀스 가져오기 -->
	<select id="selectLastReviewSeq" resultType="int">
		select max(review_seq) from review
	</select>
	
	<!-- 리뷰이미지 가져오기 -->
	<select id="getReviewImgList" resultType="map" parameterType="int">
	 	select IMAGE_URL from REVIEW_IMAGE where review_seq = #{reviewSeq}
	</select>
	
	<!-- 리뷰 목록 출력 (페이지네이션) -->
	<select id="getReviewList" resultType="map">
		 SELECT 
		    r.*,
		    (SELECT COUNT(*)
		     FROM REVIEW
		     WHERE product_seq = #{product_seq}) AS total_count
		FROM (
		    SELECT
		        r.PRODUCT_SEQ,
		        r.REVIEW_SEQ,
		        r.RATING,
		        r.REVIEW_CONTENTS,
		        TO_CHAR(r.REVIEW_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REVIEW_DATE,
		        r.MEMBER_ID,
		        ROW_NUMBER() OVER (ORDER BY r.REVIEW_DATE DESC) AS rn
		    FROM REVIEW r
		    WHERE r.product_seq = #{product_seq}
		) r
		WHERE r.rn BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="getReviewListByBest" resultType="map">
		SELECT 
	    r.*,
	    (SELECT COUNT(*) FROM REVIEW WHERE product_seq = #{product_seq}) AS total_count,
	    NVL(r.like_count, 0) AS like_count
		FROM (
		    SELECT
		        r.PRODUCT_SEQ,
		        r.REVIEW_SEQ,
		        r.RATING,
		        r.REVIEW_CONTENTS,
		        TO_CHAR(r.REVIEW_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REVIEW_DATE,
		        r.MEMBER_ID,
		        NVL(rl.like_count, 0) AS like_count,
		        ROW_NUMBER() OVER (ORDER BY NVL(rl.like_count, 0) DESC, r.REVIEW_DATE DESC) AS rn
		    FROM REVIEW r
		    LEFT JOIN (
		        SELECT review_seq, COUNT(*) AS like_count
		        FROM review_like
		        GROUP BY review_seq
		    ) rl ON r.REVIEW_SEQ = rl.review_seq
		    WHERE r.product_seq = #{product_seq}
		) r
		WHERE r.rn BETWEEN #{startRow} AND #{endRow}
	</select>

	
	<!-- 이미지 삭제 -->
	<delete id="delReviewImage" parameterType="String">
		DELETE FROM review_image WHERE image_url = #{image_url}
	</delete>
	
	<delete id="delReviewImages" parameterType="int">
	    DELETE FROM review_image WHERE review_seq = #{review_seq}
	</delete>
	
	<delete id="delReview" parameterType="int">
	    DELETE FROM reviews WHERE review_seq = #{review_seq}
	</delete>
	
	<!-- 리뷰 신고 -->
	<insert id="sendReviewReport">
	    INSERT 
	    	INTO review_report
	    VALUES 
	    	(review_report_seq.NEXTVAL, #{report_code}, SYSDATE, #{review_seq}, #{member_id})
	</insert>

	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="map">
		UPDATE 
			review
		SET 
		    rating = #{rating}, 
		    review_contents = #{review_contents}, 
		    review_date = SYSDATE
		WHERE 
	    	review_seq = #{review_seq}
	</update>   
	
	<!-- 전체 별점 --> 
	<select id="getRatings" resultType="com.hows.product.dto.ReviewDTO">
		select rating from REVIEW where product_seq = #{product_seq}
	</select>
	
	<!-- My 리뷰 목록 -->
	<select id="myReview" resultMap="myReviewMap">
		SELECT
			r.*,
			p.product_title
		FROM
			review r
			JOIN product p ON r.product_seq = p.product_seq
		WHERE
			member_id = #{member_id}
	</select>

	<select id="myReviewImage" resultType="com.hows.product.dto.ImageDTO">
		SELECT
			*
		FROM
			review_image
		WHERE
			review_seq = #{review_seq}
	</select>

	<!-- 상품 등록 -->
	<insert id="insert">
		<selectKey keyProperty="product_seq" resultType="int"
			order="AFTER">
			select product_seq.currval from dual
		</selectKey>
		insert into product values (product_seq.nextval, ' ',
		#{product_title}, #{product_contents}, #{price}, #{quantity},
		#{product_category_code})
	</insert>
	
	<!-- 상품 삭제 -->
	<delete id="deleteProduct">
		delete from product where product_seq = #{productSeq}
	</delete>

	<!-- 상품 대표이미지 변경 -->
	<update id="updateThumbNail">
		update product set product_thumbnail = #{url} where product_seq = #{seq}
	</update>

	<!-- 관리자 -->
	<!-- 리뷰 신고목록 조회 (관리자) -->
	<select id="getReportedReviews" resultType="map">
    SELECT *
    FROM (
        SELECT 
            r.review_seq,  <!-- 리뷰 번호 -->
            p.product_title,  <!-- 상품 제목 -->
            m.nickname,  <!-- 리뷰 작성자 (닉네임) -->
            r.review_contents,  <!-- 리뷰 내용 -->
            TO_CHAR(r.review_date, 'YYYY-MM-DD HH24:MI:SS') AS review_date,  <!-- 작성 일시 -->
            (
                SELECT COUNT(DISTINCT rr.review_report_seq)
                FROM review_report rr
                WHERE rr.review_seq = r.review_seq
            ) AS report_count,  <!-- 신고 횟수 (중복 제거) -->
            COALESCE(LISTAGG(ri.image_url, ',') WITHIN GROUP (ORDER BY ri.image_order), ' ') AS image_urls,  <!-- 이미지 목록 -->
            ROW_NUMBER() OVER (ORDER BY r.review_seq DESC) AS row_num  <!-- 각 행에 순번 부여 -->
        FROM 
            review r
        JOIN 
            product p ON r.product_seq = p.product_seq
        JOIN 
            member m ON r.member_id = m.member_id
        LEFT JOIN 
            review_image ri ON r.review_seq = ri.review_seq  <!-- 리뷰 이미지 조인 -->
        GROUP BY 
            r.review_seq, p.product_title, m.nickname, r.review_contents, r.review_date
    	)
    	WHERE row_num BETWEEN #{startRow} AND #{endRow}  <!-- 페이징 처리 -->
    	AND report_count > 0 -- 신고 횟수가 1 이상인 경우만 조회
	</select>

	
	<!-- 페이지네비를 위한 신고 리뷰 카운트 (관리자) -->
	<select id="getReportedReviewsCount" resultType="int">
    SELECT 
        COUNT(DISTINCT r.review_seq)  -- 중복된 리뷰는 하나로 계산
    FROM 
        review r
    JOIN 
        review_report rr ON r.review_seq = rr.review_seq
	</select>

	<!-- 리뷰 신고내역 조회 (관리자) -->
	<select id="selectReviewReport" resultType="com.hows.product.dto.ReviewReportDTO">
    	SELECT 
        	rr.review_report_seq,
        	rp.report_description AS report_code,  <!-- 신고 사유를 report_code 자리에 가져옴 -->
        	rr.review_report_date,
        	rr.review_seq,
        	m.nickname AS member_id  <!-- member_id 대신 nickname을 가져옴 -->
        FROM 
        	review_report rr
        JOIN 
        	member m ON rr.member_id = m.member_id
        JOIN 
        	report rp ON rr.report_code = rp.report_code  <!-- report 테이블 조인하여 report_description 가져옴 -->
        WHERE 
        	rr.review_seq = #{review_seq}
	</select>
	
	<!-- 신고 리뷰 및 관련 신고 기록 삭제 (관리자) -->
	<delete id="deleteReview" parameterType="int">
    <!-- 먼저 리뷰에 대한 신고 기록 삭제 -->
    	DELETE FROM review_report
    	WHERE review_seq = #{review_seq}	
	</delete>
	
	<!-- 그 다음에 리뷰 삭제 -->
	<delete id="deleteReviewReport">
    DELETE FROM review
    WHERE review_seq = #{review_seq}
	</delete>
	
	<!-- 상품 수량 변경 -->
	<update id="updateByQuantity">
		update product set quantity = #{quantity} where product_seq = #{productSeq}
	</update>
	
	<!-- 카테고리별 상품 수 조회 -->
	<select id="getProductNumByCategory" resultType="map"> 
		select c.product_category_title as category_title, 
           count(p.product_category_code) as product_count
    	from product_category c
    	left join product p on p.product_category_code = c.product_category_code
    	group by c.product_category_title
	</select>

	<!-- 주문 완료 시 재고 차감 -->
	<update id="updateQuantity">
		UPDATE
			product
		SET
			quantity = quantity - #{order_list_count}
		WHERE
			product_seq = #{product_seq}
	</update>
	
	<!-- 판매량 순으로 5개까지만 조회 -->
	<select id="getBestProductBySelling" resultType="com.hows.product.dto.ProductDTO">
		select *
		from (
    		select p.product_seq, 
           		p.product_title, 
           		p.product_thumbnail,
           		p.price,
           		p.quantity,
           		sum(ol.order_list_count) as total_sales
    		from product p
    		join order_list ol on p.product_seq = ol.product_seq
    		join orders o on ol.order_seq = o.order_seq
    		where o.order_code = 'O6'  -- 구매확정된 주문
    		group by p.product_seq, p.product_title, p.product_thumbnail, p.price, p.quantity
    		order by total_sales desc
		) 
		where rownum &lt;= 5
	</select>
	
	<!-- 리뷰순으로 5개까지만 조회 -->
	<select id="getBestProductByReview" resultType="com.hows.product.dto.ProductDTO">
		select *
		from (
    		select p.product_seq, 
           		p.product_title, 
           		p.product_thumbnail,
           		p.price,
           		p.quantity, 
           		count(r.review_seq) as review_count
    		from product p
    		left join review r on p.product_seq = r.product_seq
    		group by p.product_seq, p.product_title, p.product_thumbnail, p.price, p.quantity
    		order by review_count desc
		)
		where rownum &lt;= 5
	</select>
	
	<!-- 상품 전체 목록 조회 (관리자) -->
	<select id="getProductsByAdmin" resultType="com.hows.product.dto.ProductDTO">
		select * from product
	</select>
</mapper>